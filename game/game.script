local monarch = require "monarch.monarch"
local sounds = require "game.sounds"
local champs = require "game.champs"

local RING_CORNERS = {
	{ x = -60, y = -40 },
	{ x = 60, y = -40 },
	{ x = -60, y = 50 },
	{ x = 60, y = 50 },
}

local RING_SYMBOLS = { "star", "skull", "transparent1px" }
local RING_MATS = { "ring_blue", "ring_grey", "ring_purple", "ring_brown", "ring_green" }

local function create_champ(player)
	local corner = RING_CORNERS[player.index]
	local data = champs.get(player.champ)
	local pos = vmath.vector3(corner.x, corner.y, 0)
	local props = {
		controls = player.controls,
		gamepad = player.gamepad,
		index = player.index,
		champ = player.champ,
		team = player.team,
		initial_max_speed = data.speed,
		initial_stamina = data.stamina,
	}
	return factory.create("#champfactory", pos, nil, props)
end

function init(self)
	local c = 0.3
	msg.post("@render:", "clear_color", { color = vmath.vector4(c,c,c,1) })
	--msg.post("@render:", "clear_color", { color = vmath.vector4(0.3, 0.3, 0.3, 1.0) })
	
	sprite.play_flipbook("mat_symbol#symbol", RING_SYMBOLS[math.random(1, #RING_SYMBOLS)])
	sprite.play_flipbook("mat#sprite", RING_MATS[math.random(1, #RING_MATS)])

	local players = monarch.data("game")
	local champs = {}
	local teams = {}
	local team_count = 0
	for i,player in ipairs(players) do
		champs[i] = create_champ(player)
		if not teams[player.team] then
			teams[player.team] = true
			team_count = team_count + 1
		end
	end

	msg.post("/hud", "start_game", { champs = #champs, teams = team_count })

	--[[

	Controls:
	Arrows -> move
	Double tap arrow -> run
	Move into opponent -> Grapple
	A -> Punch
	B -> Kick
	A when running -> Clothesline -> Opponent on mat
	B when running -> Jump kick -> Opponent on mat
	A when running and opponent on mat -> Elbow
	B when running and opponent on mat -> Big splash (land on opponent)
	A when opponent on mat -> Pin opponent -> Referee count
	B when opponent on mat -> Pick up opponent
	A when opponent picked up -> Throw (out of ring if possible)
	B when opponent picked up -> Knee/back breaker
	A when grappling -> Throw backwards
	B when grappling -> Backwards kick with flip
	--]]

	timer.delay(0, false, function()
		sounds.bell()
	end)
end
